import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import dash
from dash import html, dcc  
from dash.dependencies import Input, Output, State
from dash import no_update
import datetime as dt

app = dash.Dash(__name__)

app.config.suppress_callback_exceptions = True

df =  pd.read_csv('https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/historical_automobile_sales.csv')


app.layout = html.Div(children=[html.H1('Automobile Sales Statistics Dashboard', 
                                style={'textAlign': 'center', 'color': '#503D36',
                                'font-size': 24}),

     html.Div([
                   
                    html.Div([
                            html.H2('Select Report:', style={'margin-right': '2em'}),
                      dcc.Dropdown(id='dropdown-statistics', 
                                        options=[
                                                {'label': 'Yearly Statistics', 'value': 'Yearly Statistics'},
                                                {'label': 'Recession Period Statistics', 'value': 'Recession Period Statistics'}
                                                ],
                                        placeholder='Select a report type',
                                        value='Select Statistics',
                                        style={'text-align-last':'center', 'font-size':20, 'width':'80%', 'padding':'3px'})
                    ]),

                    html.Div([
                            html.H2('Select Year:', style={'margin-right': '2em'}),
                      dcc.Dropdown(id='select-year', 
                                        options=[{'label': i, 'value': 'Select-year'} for i in range(1980,2024,1)],
                                        placeholder='Select-year',
                                        style={'text-align-last':'center', 'font-size':20, 'width':'80%', 'padding':'3px'})
                    ]),

                    html.Div([
                
                        html.Div(id='output-container', className='chart-grid')],
                        style={'display': 'flex'}),
     
    ])
    
])



@app.callback(
    Output(component_id='select-year', component_property='disabled'),
    Input(component_id='dropdown-statistics', component_property='value'))


def update_input_container():
    if 'dropdown-statictics' == 'Yearly Statistics':
        return True
    else:
        return False

@app.callback(
    Output(component_id='output-container', component_property='children'),
    [Input(component_id='dropdown-statistics', component_property='value'), Input(component_id='select-year', component_property='value')])

def update_output_container(id, value):
    if 'dropdown-statistics' == 'Recession Period Statistics':        
        recession_data = df[df['Recession'] == 1]
    else:
        df['Year'].unique()


def graph_display():

        yearly_rec=recession_data.groupby('Year')['Automobile_Sales'].mean().reset_index()
        R_chart1 = dcc.Graph(
            figure=px.line(yearly_rec, 
            x='Year',
            y='Automobile Sales',
            title='Automobile Sales during Recession Period'))


        average_sales = recession_data.groupby('Vehicle_Type')['Automobile_Sales'].mean().reset_index()                 
        R_chart2  = dcc.Graph(
            figure=px.bar(average_sales,
            x='Vehicle Types',
            y='Average Automobile Sales',
            title='Average Automobile Sales by Vehicle Types during Recession'))



        exp_rec= recession_data.groupby('Vehicle_Type')['Advertising_Expenditure'].sum()
        R_chart3 = dcc.Graph(
            figure=px.pie(exp_rec,
            values=exp_rec,
            names='Vehicle_Type',
            title='Total Advertising Expenditure by Vehicle Types during Recession'))



        unemp_data= recession_data.groupby(['unemployment_rate', 'Vehicle_Type'])['Automobile_Sales'].mean().reset_index()
        R_chart4 = dcc.Graph(figure=px.bar(unemp_data,
            x='Unemployment Rate',
            y='Automobile Sales',
            color='Vehicle_Type',
            labels={'unemployment_rate': 'Unemployment Rate', 'Automobile_Sales': 'Average Automobile Sales'},
            title='Effect of Unemployment Rate on Vehicle Type and Sales'))


        return [
            html.Div(className='chart-item', children=[html.Div(children=R_chart1),html.Div(children=R_chart2)],style={'display': 'flex'}),
            html.Div(className='chart-item', children=[html.Div(children=R_chart3),html.Div(children=R_chart4)],style={'display': 'flex'})
            ]
 



if __name__ == '__main__':
    app.run_server()
